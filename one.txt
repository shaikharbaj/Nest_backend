// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// type Role{
//      admin
//      user
// }
enum Role {
  ADMIN
  USER
  MODERATOR
}

model User {
  id               Int              @id @default(autoincrement())
  name             String?
  avatar           String?
  email            String           @unique
  password         String
  // role             Role             @default(USER)
  user_information userInformation?
  OTP              OTP?
  // roles            userRoles[]
  role_id          Int
  role             Roles            @relation(fields: [role_id], references: [id])
  // userRoles        userRoles[]
}

model userInformation {
  id            Int       @id @default(autoincrement())
  data_of_birth DateTime? @db.Date()
  phone_number  String?   @db.VarChar(25)
  street        String?
  city          String?
  state         String?
  zipcode       String?
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OTP {
  id         Int      @id @default(autoincrement())
  otp        Int
  user_id    Int      @unique
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Roles {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  // users     userRoles[]
  // userRoles userRoles[]
}

// model userRoles {
//   roleId Int
//   role   Roles @relation(fields: [roleId], references: [id])
//   userId Int
//   user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, roleId])
// }

model JsonExample {
  id         Int    @id @default(autoincrement())
  name       String
  attributes Json
}





import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';
const prisma = new PrismaClient();

async function main() {
  console.log('admin info seeding start...!');
  const adminInfo = {
    name: 'Admin',
    email: 'admin@gmail.com',
    password: 'Admin@123',
  };
  const hashedpassword = await bcrypt.hash('Admin@123', 10);
  //find admin role id...
  const adminRole = await prisma.roles.findFirst({
    where: {
      name: 'ADMIN',
    },
  });
  // const user = await prisma.user.create({
  //   data: {
  //     name: 'Admin',
  //     email: 'admin@gmail.com',
  //     password: hashedpassword,
  //     user_information: {
  //       create: {
  //         phone_number: '7028504876',
  //         data_of_birth: new Date('2001-05-10'),
  //         street: 'Jalgaon',
  //         city: 'Jalgaon',
  //         state: 'Maharashtra',
  //         zipcode: '413723',
  //       },
  //     },
  //     roles: {
  //       create: {
  //         role: {
  //           connect: {
  //             id: adminRole.id,
  //           },
  //         },
  //       },
  //     },
  //   },
  // });
  console.log('data seeded successfully....!');
}

main()
  .catch((e) => {
    console.log(e);
    process.exit(1);
  })
  .finally(() => {
    prisma.$disconnect();
  });


,
  "prisma": {
    "seed": "ts-node prisma/seeders/seed.ts"
  }













  [
  {
    asset_id: '231448145809f0c3866f2cf069db9e55',
    public_id: 'nest/qp1dkugjqixyffsmtm1j',
    version: 1717065182,
    version_id: '5e1959b85b4e38ab2981bfb37be1e512',
    signature: 'cfa93cd34e162928bc55932c2f021477601aef5f',
    width: 1920,
    height: 1080,
    format: 'png',
    resource_type: 'image',
    created_at: '2024-05-30T10:33:02Z',
    tags: [],
    bytes: 252816,
    type: 'upload',
    etag: 'f7fdbf014b445f46367e11c75440f281',
    placeholder: false,
    url: 'http://res.cloudinary.com/dj48ilwse/image/upload/v1717065182/nest/qp1dkugjqixyffsmtm1j.png',
    secure_url: 'https://res.cloudinary.com/dj48ilwse/image/upload/v1717065182/nest/qp1dkugjqixyffsmtm1j.png',
    folder: 'nest',
    original_filename: 'file',
    api_key: '892445676793415'
  },
  {
    asset_id: '34fc1fc9cb484801fc476cc916075c02',
    public_id: 'nest/gvoz3rh89afpdqlmdidh',
    version: 1717065183,
    version_id: '8effade8ed3d0d2984db95a5520be6df',
    signature: '6d76d32dccc00cde6f0f8ffd720189801915527a',
    width: 1366,
    height: 768,
    format: 'png',
    resource_type: 'image',
    created_at: '2024-05-30T10:33:03Z',
    tags: [],
    bytes: 762737,
    type: 'upload',
    etag: '4f813377f5541b059121db2396a5700f',
    placeholder: false,
    url: 'http://res.cloudinary.com/dj48ilwse/image/upload/v1717065183/nest/gvoz3rh89afpdqlmdidh.png',
    secure_url: 'https://res.cloudinary.com/dj48ilwse/image/upload/v1717065183/nest/gvoz3rh89afpdqlmdidh.png',
    folder: 'nest',
    original_filename: 'file',
    api_key: '892445676793415'
  }
]




//   if (ids.length > 0) {
          //     //delete...
          //     await this.prisma.category.deleteMany({
          //       where: {
          //         id: {
          //           in: ids,
          //         },
          //       },
          //     });
          //   }


varient =[
    [{attributeId: 1, attributeValueId: 1},{attributeId: 2, attributeValueId: 3},{attributeId: 3, attributeValueId: 4}],
    [{attributeId: 1, attributeValueId: 1},{attributeId: 2, attributeValueId: 3},{attributeId: 3, attributeValueId: 5}]
]





{
  main: [
    {
      fieldname: 'main',
      originalname: '_original_imagzhspjy5g8nh3.jpg',
      encoding: '7bit',
      mimetype: 'image/jpeg',
      buffer: <Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 01 46 00 00 01 a0 08 02 00 00 00 59 a8 59 38 00 00 20 00 49 44 41 54 78 9c ec bd 69 90 64 d7 75 ... 102897 more bytes>,
      size: 102947
    }
  ],
  file1: [
    {
      fieldname: 'file1',
      originalname: '_original_imagzhspjy5g8nh3.jpg',
      encoding: '7bit',
      mimetype: 'image/jpeg',
      buffer: <Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 01 46 00 00 01 a0 08 02 00 00 00 59 a8 59 38 00 00 20 00 49 44 41 54 78 9c ec bd 69 90 64 d7 75 ... 102897 more bytes>,
      size: 102947
    }
  ],
  file2: [
    {
      fieldname: 'file2',
      originalname: 'avengers.png',
      encoding: '7bit',
      mimetype: 'image/png',
      buffer: <Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 05 00 00 00 02 d0 08 02 00 00 00 40 1f 4a 01 00 00 00 09 70 48 59 73 00 00 0e c4 00 00 0e c4 01 ... 237041 more bytes>,
      size: 237091
    }
  ]
}


let obj=[];
for(let i=0;i<Object.keys(files)).length;i++){
       obj.push(files[Object.keys(files)[i]][0])
}