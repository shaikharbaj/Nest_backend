// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  SUPPLIER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum PaymentMethod {
  CASH_ON_DELIVERY
}

model User {
  id               Int              @id @default(autoincrement())
  name             String?
  avatar           String?
  email            String           @unique
  password         String
  user_information userInformation?
  OTP              OTP?
  status           Boolean          @default(true)
  role_id          Int
  role             Roles            @relation(fields: [role_id], references: [id])
  userType         UserType?
  products         Product[]
  banner           Banner[]
  blogs            Blog[]
  cart             Cart?
  orders           Order[]
  orderItems       OrderItem[]
  userAddress      userAddress[]
}

// model UserType {
//   id   Int    @id @default(autoincrement())
//   name String
//   user User[]
// }

model userInformation {
  id            Int       @id @default(autoincrement())
  data_of_birth DateTime? @db.Date()
  phone_number  String?   @db.VarChar(25)
  street        String?
  city          String?
  state         String?
  zipcode       String?
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userAddress {
  id           Int    @id @default(autoincrement())
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
  country      String
  state        String
  city         String
  address      String
  zipcode      String
  phone_number String
}

model OTP {
  id         Int      @id @default(autoincrement())
  otp        Int
  user_id    Int      @unique
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Roles {
  id          Int                @id @default(autoincrement())
  name        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       User[]
  suppliers   Supplier[]
  permissions role_permissions[]
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  start_date  DateTime
  end_date    DateTime
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])

  @@map("banner")
}

model Category {
  id                  Int              @id @default(autoincrement())
  name                String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  parent              Category?        @relation("ParentCategory", fields: [parent_id], references: [id])
  parent_id           Int?
  Category            Category[]       @relation("ParentCategory")
  blogs               Blog[]           @relation("blogcategory")
  subcategory         Blog[]           @relation("blogsubcategory")
  category_status     Boolean          @default(true)
  subcategory_status  Boolean?
  products            Product[]        @relation("CategoryProducts")
  subcategoryProducts Product[]        @relation("SubcategoryProducts")
  attributeUnit       AttributesUnit[]
  attributes          Attributes[]

  @@map("category")
}

model AttributesUnit {
  id             Int              @id @default(autoincrement())
  name           String
  status         Boolean          @default(false)
  category_id    Int
  category       Category         @relation(fields: [category_id], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  attrubutevalue AttributesValue[]

  @@map("attributes_unit")
}

model Attributes {
  id              Int               @id @default(autoincrement())
  name            String
  status          Boolean           @default(false)
  required        Boolean           @default(false)
  category        Category?         @relation(fields: [category_id], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  category_id     Int?
  attributevalues AttributesValue[]

  @@map("attributes")
}

model AttributesValue {
  id               Int             @id @default(autoincrement())
  name             String
  status           Boolean         @default(false)
  attributes       Attributes      @relation(fields: [attributes_id], references: [id])
  attributes_id    Int
  attributeunit    AttributesUnit? @relation(fields: [attributeunit_id], references: [id])
  attributeunit_id Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("attribute_value")
}

model Blog {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  image          String
  category       Category @relation(name: "blogcategory", fields: [category_id], references: [id])
  category_id    Int
  subcategory_id Int
  subcategory    Category @relation(name: "blogsubcategory", fields: [subcategory_id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id])
  user_id        Int

  @@map("blogs")
}

model Permissions {
  id              Int                @id @default(autoincrement())
  slug            String             @unique
  permission_name String
  description     String
  module          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       Int
  isActive        Boolean            @default(false)
  roles           role_permissions[]
}

model role_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  role          Roles       @relation(fields: [role_id], references: [id])
  userType      UserType?
  permission_id Int
  permission    Permissions @relation(fields: [permission_id], references: [id])

  // @@id([role_id, permission_id])
}

//supplier......
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  address   String?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  role_id   Int
  role      Roles    @relation(fields: [role_id], references: [id])
  // products  Product[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  slug           String
  description    String
  originalprice  Float
  discountprice  Float?
  stock          Int
  image          String?
  category_id    Int
  subcategory_id Int
  cartItems      CartItem[]
  category       Category        @relation("CategoryProducts", fields: [category_id], references: [id])
  subcategory    Category?       @relation("SubcategoryProducts", fields: [subcategory_id], references: [id])
  supplier_id    Int
  supplier       User            @relation(fields: [supplier_id], references: [id])
  orderItems     OrderItem[]
  productImages  productImages[]
}

model productImages {
  id          Int     @id @default(autoincrement())
  url         String
  product_id  Int
  product     Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  isThumbnail Boolean @default(false)
}

//cart model.....
model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//order..............
model Order {
  id                   Int           @id @default(autoincrement())
  user                 User          @relation(fields: [userId], references: [id])
  userId               Int
  totalPrice           Float
  status               OrderStatus   @default(PENDING)
  paymentStatus        PaymentStatus @default(UNPAID)
  paymentMethod        PaymentMethod @default(CASH_ON_DELIVERY)
  shippingName         String
  shippingPhone        String
  shippingEmail        String
  shippingAddressLine1 String
  shippingAddressLine2 String?
  shippingCity         String
  shippingState        String
  shippingZipCode      String
  shippingCountry      String
  orderItems           OrderItem[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model OrderItem {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int
  product       Product       @relation(fields: [productId], references: [id])
  productId     Int
  quantity      Int
  supplierId    Int
  supplier      User          @relation(fields: [supplierId], references: [id])
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  price         Float
}
