// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  name             String?
  avatar           String?
  email            String           @unique
  password         String
  user_information userInformation?
  OTP              OTP?
  status           Boolean          @default(true)
  role_id          Int
  role             Roles            @relation(fields: [role_id], references: [id])
  banner           Banner[]
  blogs            Blog[]
}

model userInformation {
  id            Int       @id @default(autoincrement())
  data_of_birth DateTime? @db.Date()
  phone_number  String?   @db.VarChar(25)
  street        String?
  city          String?
  state         String?
  zipcode       String?
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OTP {
  id         Int      @id @default(autoincrement())
  otp        Int
  user_id    Int      @unique
  isVerified Boolean  @default(false)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Roles {
  id          Int                @id @default(autoincrement())
  name        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       User[]
  suppliers   Supplier[]
  permissions role_permissions[]

}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  start_date  DateTime
  end_date    DateTime
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])

  @@map("banner")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("ParentCategory", fields: [parent_id], references: [id])
  parent_id   Int?
  Category    Category[] @relation("ParentCategory")
  blogs       Blog[]     @relation("blogcategory")
  subcategory Blog[]     @relation("blogsubcategory")

  @@map("category")
}

model Blog {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  image          String
  category       Category @relation(name: "blogcategory", fields: [category_id], references: [id])
  category_id    Int
  subcategory_id Int
  subcategory    Category @relation(name: "blogsubcategory", fields: [subcategory_id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id])
  user_id        Int

  @@map("blogs")
}

model Permissions {
  id              Int                @id @default(autoincrement())
  slug            String             @unique
  permission_name String
  description     String
  module          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       Int
  isActive        Boolean            @default(false)
  roles           role_permissions[]
}

model role_permissions {
  role_id       Int
  role          Roles       @relation(fields: [role_id], references: [id])
  permission_id Int
  permission    Permissions @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
}

//supplier......
model Supplier {
     id Int @id @default(autoincrement())
     name String
     email String @unique
     password String
     avatar String?
     address String?
     status Boolean @default(true)
     createdAt DateTime @default(now())
     updateAt DateTime @updatedAt
     role_id Int 
     role Roles @relation(fields: [role_id],references: [id])
}

// model Product{
//       id Int @id @default(autoincrement())
//       name String
//       description String
//       originalprice Float
//       discountprice Float?
//       stock Int
//       image String


// }